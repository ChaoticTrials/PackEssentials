import org.w3c.dom.Document
import org.w3c.dom.NodeList

import javax.xml.parsers.DocumentBuilderFactory

buildscript {
    apply from: 'https://moddingx.github.io/ModUtils/v5/buildscript.gradle', to: buildscript
}

apply from: 'https://moddingx.github.io/ModUtils/v5/mod.gradle'

apply plugin: 'org.moddingx.modgradle.cursedep'
apply plugin: 'org.moddingx.modgradle.coremods'
apply plugin: 'maven-publish'
mod['version'] = getVersion(mod.minecraft + "-" + mod.base_version, new URL(mod.remote_maven + "/" + group.replace('.', '/') + "/" + name + "/maven-metadata.xml"))
project.version = mod.version

repositories {
    maven {
        name = "Mirror for many mods"
        url = "https://modmaven.dev/"
    }
    maven {
        url = "https://maven.twelveiterations.com/repository/maven-public/"
    }
}

dependencies {
    annotationProcessor fg.deobf("org.moddingx:LibX:1.20.1-5.0.14")

    implementation fg.deobf("org.moddingx:LibX:1.20.1-5.0.14")
    implementation curse.mod(324717, 5339264)
    compileOnly fg.deobf("net.blay09.mods:balm-forge:7.2.2+1.20.1")
    compileOnly fg.deobf("net.blay09.mods:cookingforblockheads-forge:16.0.4+1.20.1")

    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.3.0.4")

    coremods 'org.moddingx:CoreModTypes:5.0.2-2'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact(jar) {
                builtBy project.provider { project.tasks.named('reobfJar') }
            }
            if (mod.sources) {
                artifact(sourceJar)
            }
            pom {
                licenses {
                    license {
                        name = mod.license
                        url = mod.license_url.toString()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url mod.remote_maven
            credentials(PasswordCredentials)
        }
    }
}
publish.dependsOn('reobfJar')

private static String getVersion(String baseVersion, URL url) {
    try {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")

        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(connection.getInputStream())
        NodeList versionNodes = doc.getElementsByTagName("version")

        String latestVersion = null;
        for (int i = 0; i < versionNodes.getLength(); i++) {
            String version = versionNodes.item(i).getTextContent()
            if (version.startsWith(baseVersion)) {
                latestVersion = version
            }
        }

        if (latestVersion == null) {
            return baseVersion + ".0"
        }

        return baseVersion + "." + (Integer.parseInt(latestVersion.substring(latestVersion.lastIndexOf('.') + 1)) + 1)
    } catch (FileNotFoundException ignored) {
        // This exception is thrown if the maven-metadata.xml file doesn't exist at the provided URL,
        // which would be the case if there were no previous publications to this Maven repository with this project
        return baseVersion + ".0"
    } catch (Exception e) {
        throw new RuntimeException(e)
    }
}
